Notas projeto chatgpt-clone

extensions -> tldraw, não relacionada ao projeto, mas vai ajudar na explicação da arquitetura escolhida

nodejs.org -> baixar o Node.js (LTS)

cd -> change director

mkdir -> creat director

.code -> abre o VSCode

Para iniciar um projeto node, deve-se executar o comando -> npm init -y (inicia um projeto node.js, sem fazer perguntas). É preciso ter o nvm baixado.

Dependencias:
npm i cors dotenv express openai
        npm i -> instala pacotes
        cors -> contola quem tem acesso
        dotenv -> retira os dados senciveis do projeto
        express -> permite criar APIs/servido rest mais simples, facil e rapida
        openia -> biblioteca oficial da OpenAI

Boas praticas: Tudo dentro da pasta src (source), é o nosso projeto, codigo fonte. Fora estão os arquivos de configuração

O arquivo .gitignore faz com que os arquivos com nome nele, não sejam exportadas para o github

node src/server, executa a aplicação

ctrl+c no terminal finaliza a execução

node --watch src/server, executa a aplicação e fica esperando por atualizações

Criando o arquivo openai.js, onde colocaremos as configurações que a propria OpenAi fornece, fizemos algumas modigicações, para permitir que possamos importa-la em diferentes locais, caso necessario, para isso iremos dividir as configs em dois metodos, ambos staticos, um deles sendo o configuration o qual ira retornar uma instancia de configuração da openai e o segundo metodo retornando as configurações do prompt

npm install -g create-react-app -> instala a feramenta do react app
        -g -> global, para todos os projetos

npm install create-react-app -> instala apenas para o projeto em questão

npx create-react-app gpt-front -> cria toda a estrutura de uma projeto react, facilitando a criacao do pojeto(site oficial= creat-react-app.dev/docs/getting-started)
        -> gpt-front é o nome do projeto -> essa pasta foi eliminada, de forma a manter uma organizacao do projeto
Uma alternativa para se criar projetos React é utilizando o -> Vite <-, ferramenta mais moderna.

Limpeza nos arquivos, pois não seram utilizados: App.test.js, reportWebVitals.js, setupTests.js

Instalar extensão NPM scripts, executar o start, isso esta sendo feito para verificar se o projeto esta funcionando e que as alterações não o quebraram

Ainda buscando uma melhor oganização do projeto criamos duas novas pastas dentro da web/src/, são elas components e styles. a components recebera os componentes e a styles recebera tudo relacionado ao styles, os arquivos App.css e index.css seram movidos para o interior da styles, lebrando que ao fazer isso ocorrera um erro, para soluciona-lo deve-se alterar a referencia do import nos arquivos que fazem a utilização do App.css e index.css. Ao atualizar as referencias no App.js e index.js para './styles/App.css' e './styles/index.css' respectivamente.

Utilizando o comando npm i axios, iremos instalar essa ferramenta, ela nos ajuda a consumir recursos http, ou seja APIs. Como boa pratica, tambem faremos a criação de uma pasta dedicada as APIs com um arquivo api.js, nele faremos o import axios from 'axios', para podermos usar a ferramenta. E a url da Api

Utilizaremos um componete para aumentar a compatibilidade entre navegadores, essa tecnica é chamada cssReset

Fazer uma limpeza e organizacao do App

Criamos um componente, SideMenu e seus arquivos de js e css, criamos também um botao.
Curiosidade: <aside></aside> é uma div que fica ao lado

Como boa pratica, organizamos as importacoes do App.js deixando primeiro as importacoes do react, de pois tudo relacionado ao estilo e por ultimo as partes que referem aos codigos progamados.